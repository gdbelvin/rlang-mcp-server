version: '3'

vars:
  BINARY_NAME: r-server
  DOCKER_IMAGE: r-server-ggplot
  COVERAGE_FILE: coverage.out
  COVERAGE_HTML: coverage.html
  GO_FILES:
    sh: find . -type f -name "*.go" | grep -v "_test.go$"

tasks:
  benchmark:
    desc: Run benchmarks
    cmds:
      - echo "Running benchmarks..."
      - go test -bench=. -benchmem ./...

  build:
    desc: Build the MCP server binary
    deps: [version:increment]
    cmds:
      - echo "Building {{.BINARY_NAME}}..."
      - go build -o {{.BINARY_NAME}} ./cmd/r-server
    sources:
      - "{{.GO_FILES}}"
    generates:
      - "{{.BINARY_NAME}}"

  build:docker:
    desc: Build Docker image using docker-compose
    deps: [version:increment]
    cmds:
      - echo "Building Docker image using docker-compose..."
      - docker-compose build
    sources:
      - "Dockerfile"
      - "docker-compose.yml"
      - "{{.BINARY_NAME}}"
      - "{{.GO_FILES}}"

  version:increment:
    desc: Increment the fix version number in server.go
    sources:
      - "{{.GO_FILES}}"
      - "Dockerfile"
      - "docker-compose.yml"
    cmds:
      - |
        # Extract current version
        CURRENT_VERSION=$(grep -o 'WithVersion("[^"]*")' internal/mcp/server.go | sed 's/WithVersion("\(.*\)")/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into major.minor.fix
        IFS='.' read -r MAJOR MINOR FIX <<< "$CURRENT_VERSION"
        
        # Increment fix version
        NEW_FIX=$((FIX + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_FIX"
        echo "New version: $NEW_VERSION"
        
        # Update version in server.go
        sed -i '' "s/WithVersion(\"$CURRENT_VERSION\")/WithVersion(\"$NEW_VERSION\")/" internal/mcp/server.go
        echo "Updated version in server.go to $NEW_VERSION"

  ci:
    desc: Run the full CI pipeline
    cmds:
      - task: lint
      - task: test
      - task: coverage
      - task: build:docker

  clean:
    desc: Clean up build artifacts
    cmds:
      - echo "Cleaning up..."
      - rm -f {{.BINARY_NAME}} {{.COVERAGE_FILE}} {{.COVERAGE_HTML}}
      - rm -rf ./test/testdata/output/*

  coverage:
    desc: Generate test coverage report
    cmds:
      - echo "Generating test coverage..."
      - go test -coverprofile={{.COVERAGE_FILE}} ./...
      - go tool cover -html={{.COVERAGE_FILE}} -o {{.COVERAGE_HTML}}
      - echo "Coverage report generated at {{.COVERAGE_HTML}}"
    generates:
      - "{{.COVERAGE_FILE}}"
      - "{{.COVERAGE_HTML}}"

  default:
    desc: List all available tasks
    cmds:
      - task --list

  lint:
    desc: Lint the code
    cmds:
      - echo "Linting code..."
      - golangci-lint run

  # MCP-specific tasks
  mcp:test-tool:
    desc: Test the render_ggplot tool with a sample plot
    deps: [build]
    cmds:
      - echo "Testing render_ggplot tool..."
      - |
        cat > test_ggplot.json << 'EOF'
        {
          "name": "render_ggplot",
          "arguments": {
            "code": "ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point() + theme_minimal() + labs(title = 'MPG vs Horsepower')",
            "output_type": "png",
            "width": 800,
            "height": 600,
            "resolution": 96
          }
        }
        EOF
      - ./{{.BINARY_NAME}} --test-tool test_ggplot.json
      - rm test_ggplot.json

  mcp:validate:
    desc: Validate MCP protocol conformance
    cmds:
      - echo "Validating MCP protocol conformance..."
      - go run ./tools/mcp-validator

  run:
    desc: Run the MCP server
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}}

  run:docker:
    desc: Run the server using docker-compose with stdin/stdout
    deps: [build:docker]
    cmds:
      - echo "Running Docker container using docker-compose with stdin/stdout..."
      - ./start_server.sh --docker

  test:
    desc: Run all tests
    cmds:
      - echo "Running tests..."
      - go test -v ./...

  test:integration:
    desc: Run integration tests
    cmds:
      - echo "Running integration tests..."
      - go test -v -tags=integration ./...

  test:protocol:
    desc: Run MCP protocol conformance tests
    cmds:
      - echo "Running MCP protocol tests..."
      - go test -v -tags=protocol ./...

  test:unit:
    desc: Run unit tests
    cmds:
      - echo "Running unit tests..."
      - go test -v -short ./...
